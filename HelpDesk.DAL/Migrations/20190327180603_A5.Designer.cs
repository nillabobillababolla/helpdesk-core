// <auto-generated />
using System;
using HelpDesk.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HelpDesk.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190327180603_A5")]
    partial class A5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HelpDesk.Models.Entities.Failure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ClientId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("FailureName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("FinishingTime");

                    b.Property<bool>("HasWarranty");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int>("OperationStatus");

                    b.Property<DateTime?>("OperationTime");

                    b.Property<string>("OperatorId");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RepairProcess");

                    b.Property<string>("Report");

                    b.Property<DateTime?>("StartingTime");

                    b.Property<string>("SurveyId");

                    b.Property<string>("TechnicianId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Failures");
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.FailureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(450);

                    b.Property<int>("FailureId");

                    b.Property<int>("FromWhom");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FailureId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(450);

                    b.Property<int>("FailureId");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FailureId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.Survey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDone");

                    b.Property<double>("Pricing");

                    b.Property<double>("Satisfaction");

                    b.Property<double>("Solving");

                    b.Property<double>("Speed");

                    b.Property<string>("Suggestions")
                        .HasMaxLength(200);

                    b.Property<double>("TechPoint");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("HelpDesk.Models.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("HelpDesk.Models.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ActivationCode");

                    b.Property<string>("AvatarPath");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<double?>("Latitude");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int?>("TechnicianStatus");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.Failure", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.HasOne("HelpDesk.Models.Entities.Survey", "Survey")
                        .WithMany("Failures")
                        .HasForeignKey("SurveyId");

                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.FailureLog", b =>
                {
                    b.HasOne("HelpDesk.Models.Entities.Failure", "Failure")
                        .WithMany("FailureLogs")
                        .HasForeignKey("FailureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelpDesk.Models.Entities.Photo", b =>
                {
                    b.HasOne("HelpDesk.Models.Entities.Failure", "Failure")
                        .WithMany("Photos")
                        .HasForeignKey("FailureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HelpDesk.Models.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
